// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  AGENT
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
  REJECTED
}

enum VehicleStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
  INACTIVE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  isVerified Boolean @default(false)
  isActive  Boolean @default(true)
  avatar    String?
  dateOfBirth DateTime?
  address   String?
  city      String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

//Verification
  verificationToken String? @unique
  passwordResetToken String? @unique
  passwordResetExpires DateTime?


  bookings Booking[]
  reviews  Review[]
  vehicles Vehicle[]
  payments Payment[]

  // Add these relation fields:
  disputesAsComplainant Dispute[] @relation("DisputeComplainant")
  disputesAsRespondent  Dispute[] @relation("DisputeRespondent")
  disputesAssignedTo    Dispute[] @relation("DisputeAssignedTo")

  @@map("users")
  @@index([email])
}

model Vehicle {
  id          String   @id @default(uuid())
  make        String
  model       String
  year        Int
  color       String
  licensePlate String @unique
  vin         String? @unique
  status      VehicleStatus @default(AVAILABLE)
  category   String
  seats        Int
  transmission String
  fuelType     String
  mileage      Float?
  description String?
  images       String[]
  pricePerDay Float
  pricePerHour Float?
  hasGPS      Boolean @default(false)
  hasAC       Boolean @default(false)
  hasBluetooth Boolean @default(false)
  hasUSB       Boolean @default(false)
  hasWiFi      Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  location    String?
  city        String?
  country     String?
  availableFrom DateTime?
  availableTo DateTime?
 agentId    String?
  agent      User?    @relation(fields: [agentId], references: [id])
  bookings    Booking[]
  reviews     Review[]
  
  @@map("vehicles")
}

model Booking {
  id          String   @id @default(uuid())
  bookingNumber String @unique
  startDate   DateTime
  endDate     DateTime
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  totalPrice  Float
  discountPrice Float? @default(0)
  finalPrice  Float 
  couponCode String?
  pickupLocation String
  returnLocation String

  notes       String?
  driverLicenseNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customerId  String
  customer    User     @relation(fields: [customerId], references: [id])
  vehicleId   String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])

  @@map("bookings")
  Payment Payment[]
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  status      PaymentStatus @default(PENDING)
  paymentMethod String //stripe, paypal, flutterwave
  transactionId String? @unique
  paymentIntendId String? 

  currency   String @default("KES")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookingId   String
  booking     Booking  @relation(fields: [bookingId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("payments")
}


model Review {
  id          String   @id @default(uuid())
  rating      Int //1-5stars
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  vehicleId   String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])

  @@unique([userId, vehicleId]) // Ensure a user can only review a vehicle once
  @@map("reviews")
}

model Cuopon {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  discountType String // percentage or fixed amount
  discountValue Float

  minAmount   Float?
  maxDiscount Float?
  usageLimit  Int? 
  usedCount   Int @default(0) 
  isActive    Boolean  @default(true)
  ValidFrom   DateTime
  ValidUntil  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coupons")
}

model Dispute {
  id          String   @id @default(uuid())
  
  // Basic dispute information
  title       String
  description String
  category    DisputeCategory
  priority    DisputePriority @default(MEDIUM)
  status      DisputeStatus   @default(PENDING)
  
  // Resolution information
  resolution     String?
  resolvedAt     DateTime?
  resolvedBy     String?   // User ID or admin who resolved it
  
  // Parties involved
  complainantId  String    // User who filed the dispute
  respondentId   String?   // User being disputed against (optional)
  assignedToId   String?   // Admin/moderator assigned to handle
  
  // Related entities (optional - customize based on your needs)
  orderId        String?   // If dispute is related to an order
  transactionId  String?   // If dispute is related to a transaction
  productId      String?   // If dispute is related to a product
  
  // Metadata
  tags           String[]  // Array of tags for categorization
  evidence       Json?     // Store evidence files, links, etc.
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations (uncomment and modify based on your existing models)
  complainant User     @relation("DisputeComplainant", fields: [complainantId], references: [id])
  respondent  User?    @relation("DisputeRespondent", fields: [respondentId], references: [id])
  assignedTo  User?    @relation("DisputeAssignedTo", fields: [assignedToId], references: [id])
  
  
  
  // Comments/Messages related to the dispute
  comments DisputeComment[]
  
  @@map("disputes")
}

model DisputeComment {
  id        String   @id @default(uuid())
  disputeId String
  authorId  String
  content   String
  isInternal Boolean @default(false) // Internal admin notes vs public comments
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  dispute   Dispute @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  // author    User    @relation(fields: [authorId], references: [id])
  
  @@map("dispute_comments")
}

enum DisputeStatus {
  PENDING
  IN_PROGRESS
  UNDER_REVIEW
  RESOLVED
  CLOSED
  ESCALATED
  CANCELLED
}

enum DisputeCategory {
  PAYMENT
  DELIVERY
  QUALITY
  REFUND
  BILLING
  SERVICE
  ACCOUNT
  TECHNICAL
  PRIVACY
  HARASSMENT
  FRAUD
  OTHER
}

enum DisputePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}